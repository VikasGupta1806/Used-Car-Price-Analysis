# -*- coding: utf-8 -*-
"""data_cleaning.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/176jkcciFBb9xbBt5TTI65yWd4LSfwpEW
"""

import pandas as pd
df = pd.read_csv("car_prices.csv", on_bad_lines='skip')

print(df.info())

df.dropna(inplace=True)

print(df.isnull().sum())

df['saledate'] = pd.to_datetime(df['saledate'], utc=True, errors='coerce')

print(df.dtypes)

import numpy as np
from scipy import stats

df['z_score'] = np.abs(stats.zscore(df['sellingprice']))

df = df[df['z_score'] <= 3]

df.drop(columns=['z_score'], inplace=True)

df.drop_duplicates(subset='vin', inplace=True)

print(df.describe())

df.to_csv('car_prices_cleaned.csv', index=False)

make_model_count = df.groupby(['make', 'model']).size().reset_index(name='num_cars')
make_model_count = make_model_count.sort_values(by='num_cars', ascending=False)

make_model_price = df.groupby(['make', 'model'])['sellingprice'].mean().reset_index(name='avg_price')
make_model_price = make_model_price.sort_values(by='avg_price', ascending=False)

print(make_model_count.head())
print(make_model_price.head())

body_count = df.groupby('body').size().reset_index(name='num_cars')
body_count = body_count.sort_values(by='num_cars', ascending=False)

body_price = df.groupby('body')['sellingprice'].mean().reset_index(name='avg_price')
body_price = body_price.sort_values(by='avg_price', ascending=False)

print(body_count.head())
print(body_price.head())

transmission_count = df.groupby('transmission').size().reset_index(name='num_cars')
transmission_count = transmission_count.sort_values(by='num_cars', ascending=False)

transmission_price = df.groupby('transmission')['sellingprice'].mean().reset_index(name='avg_price')
transmission_price = transmission_price.sort_values(by='avg_price', ascending=False)

print(transmission_count.head())
print(transmission_price.head())

condition_count = df.groupby('condition').size().reset_index(name='num_cars')
condition_count = condition_count.sort_values(by='num_cars', ascending=False)

condition_price = df.groupby('condition')['sellingprice'].mean().reset_index(name='avg_price')
condition_price = condition_price.sort_values(by='avg_price', ascending=False)

print(condition_count.head())
print(condition_price.head())

df['mileage_range'] = pd.cut(df['odometer'], bins=[0, 20000, 40000, 60000, 80000, 100000, float('inf')],
                             labels=['0-20k', '20k-40k', '40k-60k', '60k-80k', '80k-100k', '100k+'])

mileage_count = df.groupby('mileage_range').size().reset_index(name='num_cars')
mileage_count = mileage_count.sort_values(by='num_cars', ascending=False)

mileage_price = df.groupby('mileage_range')['sellingprice'].mean().reset_index(name='avg_price')
mileage_price = mileage_price.sort_values(by='avg_price', ascending=False)

print(mileage_count.head())
print(mileage_price.head())

state_price = df.groupby('state')['sellingprice'].mean().reset_index(name='avg_price')
state_price = state_price.sort_values(by='avg_price', ascending=False)

state_count = df.groupby('state').size().reset_index(name='num_cars')
state_count = state_count.sort_values(by='num_cars', ascending=False)

print(state_price.head())
print(state_count.head())